// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  fullName    String?
  email       String   @unique
  password    String
  role        RoleEnum @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  biografi    String?
  photoprofil String?
  username    String?
  following   Follow[] @relation("Following")
  follower    Follow[] @relation("Followers")
  Threads     Thread[]
  Likes       Like[]
  reply       Reply[]
  isVerified  Boolean  @default(false)

  @@map("users")
}

model Thread {
  id           Int      @id @default(autoincrement())
  threadId     Int?
  title        String?
  content      String?
  author       User?    @relation(fields: [AuthorId], references: [id])
  AuthorId     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  image        String?
  repliesCount Int?     @default(0)
  Likes        Like[]
  reply        Reply[]

  @@map("threads")
}

model Follow {
  id Int @id @default(autoincrement())

  followerId Int
  follower   User @relation("Followers", fields: [followerId], references: [id])

  followingId Int
  following   User @relation("Following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  thread   Thread @relation(fields: [threadId], references: [id])
  threadId Int

  commentId Int?
  cratedAt  DateTime @default(now())

  @@unique([userId, threadId])
  @@map("likes")
}

model Reply {
  id           Int      @id @default(autoincrement())
  content      String?
  image        String?
  likesCount   Int?     @default(0)
  repliesCount Int?     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int?
  thread       Thread?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId     Int?

  @@map("reply")
}

enum RoleEnum {
  ADMIN
  MEMBER
}
